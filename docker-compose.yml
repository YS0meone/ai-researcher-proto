services:
  postgres:
    image: postgres:17
    container_name: aira-postgres
    profiles:
      - legacy
    environment:
      POSTGRES_DB: ai_researcher
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_researcher"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Optional: Add pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4
    container_name: aira-pgadmin
    profiles:
      - legacy
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    restart: always

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: es01
    volumes:
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
    mem_limit: 2g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s http://localhost:9200 >/dev/null",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # Grobid service for PDF parsing
  grobid:
    image: grobid/grobid:0.8.2-crf
    container_name: aira-grobid
    ports:
      - "8070:8070"
    init: true
    ulimits:
      core: 0
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8070/api/isalive || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  qdrant:
    image: qdrant/qdrant:latest
    container_name: aira-qdrant
    restart: always
    ports:
      - "6333:6333"   # REST
      - "6334:6334"   # gRPC
    volumes:
      - qdrant_data:/qdrant/storage

volumes:
  esdata01:
    driver: local
  kibanadata:
    driver: local
  postgres_data:
    driver: local
  qdrant_data:
    driver: local